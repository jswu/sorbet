InsSeq{
  stats = [
    EmptyTree
    ClassDef{
      kind = class
      name = EmptyTree<<C <U <root>>>>
      ancestors = []
      rhs = [
        MethodDef{
          flags = self
          name = <U <static-init>><<N <U <static-init>> $CENSORED>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = InsSeq{
            stats = [
              EmptyTree
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::Sorbet::Private::Static
                }
                fun = <U keep_for_ide>
                block = nullptr
                args = [
                  ConstantLit{
                    orig = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <C <U A>>
                    }
                    symbol = ::A
                  }
                ]
              }
            ],
            expr = EmptyTree
          }
        }
      ]
    }
    ClassDef{
      kind = class
      name = ConstantLit{
        orig = UnresolvedConstantLit{
          scope = EmptyTree
          cnst = <C <U A>>
        }
        symbol = ::A
      }<<C <U A>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
        }]
      rhs = [
        EmptyTree

        EmptyTree

        MethodDef{
          flags = 0
          name = <U take_arguments><<U take_arguments>>
          args = [Local{
              localVariable = <U a>
            }, OptionalArg{
              expr = Local{
                localVariable = <U b>
              }
            }, Local{
              localVariable = <U c>
            }, Local{
              localVariable = <U d>
            }, OptionalArg{
              expr = Local{
                localVariable = <U e>
              }
            }, Local{
              localVariable = <U f>
            }, Local{
              localVariable = <U g>
            }]
          rhs = InsSeq{
            stats = [
              If{
                cond = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U untyped>
                  block = nullptr
                  args = [
                  ]
                }
                thenp = Assign{
                  lhs = Local{
                    localVariable = <U b>
                  }
                  rhs = Literal{ value = 1 }
                }
                elsep = EmptyTree
              }
              If{
                cond = Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                  }
                  fun = <U untyped>
                  block = nullptr
                  args = [
                  ]
                }
                thenp = Assign{
                  lhs = Local{
                    localVariable = <U e>
                  }
                  rhs = Literal{ value = 2 }
                }
                elsep = EmptyTree
              }
            ],
            expr = InsSeq{
              stats = [
                Array{
                  elems = [
                    Local{
                      localVariable = <U a>
                    }
                    Local{
                      localVariable = <U b>
                    }
                    Local{
                      localVariable = <U c>
                    }
                    Local{
                      localVariable = <U d>
                    }
                    Local{
                      localVariable = <U e>
                    }
                    Local{
                      localVariable = <U f>
                    }
                    Local{
                      localVariable = <U g>
                    }
                  ]
                }
                Assign{
                  lhs = Local{
                    localVariable = <U h>
                  }
                  rhs = Literal{ value = 1 }
                }
              ],
              expr = Send{
                recv = Local{
                  localVariable = <U <self>>
                }
                fun = <U proc>
                block = Block {
                  args = [
                    Local{
                      localVariable = <U a>$1
                    }
                    OptionalArg{
                      expr = Local{
                        localVariable = <U b>$1
                      }
                      default_ = Literal{ value = 1 }
                    }
                    RestArg{ expr = Local{
                      localVariable = <U c>$1
                    } }
                    KeywordArg{ expr = Local{
                      localVariable = <U d>$1
                    } }
                    OptionalArg{
                      expr = KeywordArg{ expr = Local{
                        localVariable = <U e>$1
                      } }
                      default_ = Literal{ value = 2 }
                    }
                    RestArg{ expr = KeywordArg{ expr = Local{
                      localVariable = <U f>$1
                    } } }
                    BlockArg{ expr = Local{
                      localVariable = <U g>$1
                    } }
                    ShadowArg{ expr = Local{
                      localVariable = <U h>$1
                    } }
                  ]
                  body = Array{
                    elems = [
                      Local{
                        localVariable = <U a>$1
                      }
                      Local{
                        localVariable = <U b>$1
                      }
                      Local{
                        localVariable = <U c>$1
                      }
                      Local{
                        localVariable = <U d>$1
                      }
                      Local{
                        localVariable = <U e>$1
                      }
                      Local{
                        localVariable = <U f>$1
                      }
                      Local{
                        localVariable = <U g>$1
                      }
                      Local{
                        localVariable = <U h>$1
                      }
                    ]
                  }
                }
                args = [
                ]
              }
            }
          }
        }

        MethodDef{
          flags = self
          name = <U <static-init>><<U <static-init>>>
          args = [Local{
              localVariable = <U <blk>>
            }]
          rhs = EmptyTree
        }
      ]
    }
  ],
  expr = EmptyTree
}
