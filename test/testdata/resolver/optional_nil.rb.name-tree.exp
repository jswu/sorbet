begin
  class <emptyTree><<C <root>>> < ()
    begin
      class ::Test<<C Test>> < (::<todo sym>)
        <emptyTree>

        <emptyTree>

        <emptyTree>

        <emptyTree>

        <emptyTree>

        <emptyTree>

        <emptyTree>

        <emptyTree>

        <self>.sig() do ||
          <self>.params({:"x" => <emptyTree>::<C String>}).returns(<emptyTree>::<C String>)
        end

        def foo<foo>(x, <blk>)
          x
        end

        <self>.sig() do ||
          <self>.params({:"y" => <emptyTree>::<C String>}).returns(<emptyTree>::<C String>)
        end

        def bar<bar>(y, <blk>)
          y
        end

        <self>.sig() do ||
          <self>.params({:"z" => <emptyTree>::<C String>}).returns(<emptyTree>::<C String>)
        end

        def qux<qux>(z, <blk>)
          z
        end

        <self>.sig() do ||
          <self>.params({:"w" => <emptyTree>::<C String>}).returns(<emptyTree>::<C String>)
        end

        def baz<baz>(w, <blk>)
          w
        end

        ::Sorbet::Private::Static.keep_for_ide(<emptyTree>::<C T>::<C Sig>)
      end
      ::Sorbet::Private::Static.keep_for_ide(::Test)
      <emptyTree>
    end
  end
  <emptyTree>
end
